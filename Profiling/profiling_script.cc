double lr_1_score(double * input) {
    return -2.1464452743530273 + input[0] * -0.1089312732219696 + input[1] * -6.223360538482666 + input[2] * -0.4626745879650116 + input[3] * 6.913839817047119 + input[4] * 1.620381236076355;
}

double lr_5_score(double * input) {
    return -2.4936611652374268 + input[0] * -0.01787577010691166 + input[1] * -0.1791873276233673 + input[2] * -0.12543953955173492 + input[3] * 0.5128828287124634 + input[4] * 0.4760875999927521 + input[5] * -0.004126798827201128 + input[6] * -0.05932193994522095 + input[7] * -0.10373453795909882 + input[8] * 0.06633652001619339 + input[9] * 1.0689924955368042 + input[10] * -0.12723244726657867 + input[11] * 0.1019907221198082 + input[12] * -0.007813949137926102 + input[13] * -0.007813949137926102 + input[14] * 0.12370765954256058 + input[15] * -0.18338334560394287 + input[16] * 0.38936325907707214 + input[17] * 0.12468361109495163 + input[18] * -0.1475820243358612 + input[19] * -0.025423657149076462 + input[20] * -0.0008634828263893723 + input[21] * -0.024622570723295212 + input[22] * 0.3475913107395172 + input[23] * -0.02358216419816017;
}

double lr_10_score(double * input) {
    return -1.0226770639419556 + input[0] * -0.014189708977937698 + input[1] * 0.07219790667295456 + input[2] * -0.03187600523233414 + input[3] * 0.2502010464668274 + input[4] * 0.10418861359357834 + input[5] * -0.021985726431012154 + input[6] * -0.006837647408246994 + input[7] * -0.06196339800953865 + input[8] * 0.16371101140975952 + input[9] * 0.5022947788238525 + input[10] * -0.0625 + input[11] * 0.015880580991506577 + input[12] * -0.0031664923299103975 + input[13] * -0.0031664923299103975 + input[14] * 0.06445929408073425 + input[15] * 0.06895951181650162 + input[16] * 0.30960267782211304 + input[17] * 0.046429648995399475 + input[18] * 0.07158111780881882 + input[19] * -0.018386119976639748 + input[20] * -0.01546112447977066 + input[21] * -0.018248070031404495 + input[22] * 0.19351109862327576 + input[23] * -0.012994003482162952 + input[24] * 0.23224285244941711 + input[25] * 0.03125002235174179 + input[26] * -0.011281068436801434 + input[27] * 0.018123526126146317 + input[28] * -0.1250511109828949 + input[29] * -0.06250018626451492 + input[30] * -0.015486613847315311 + input[31] * -0.03186056390404701 + input[32] * -0.09027031064033508 + input[33] * -0.01863347738981247 + input[34] * 0.021637877449393272 + input[35] * -0.012072375044226646 + input[36] * -0.012072375044226646 + input[37] * 0.008096813224256039 + input[38] * -0.00018354813801124692 + input[39] * 0.0 + input[40] * -0.0017903934931382537 + input[41] * -0.0007825668435543776 + input[42] * -0.0003167892573401332 + input[43] * 0.0 + input[44] * 0.0;
}

double linear_svc_1_score(double * input) {
    return -0.7135953693027814 + input[0] * -0.034655513417586485 + input[1] * -1.5695907507217832 + input[2] * -0.04624287427273534 + input[3] * 1.5906370250011905 + input[4] * 0.397022655977381;
}

double linear_svc_5_score(double * input) {
    return -1.108867081187581 + input[0] * 0.04051411815910205 + input[1] * -0.3736341729492969 + input[2] * -0.09358491938099789 + input[3] * 0.516002586390446 + input[4] * 0.31463384317439264 + input[5] * -0.01728527201444135 + input[6] * -0.11475080682483602 + input[7] * 0.039397483607689875 + input[8] * -0.1098823849940195 + input[9] * 0.49488068553145625 + input[10] * -0.019622103402788808 + input[11] * -0.01904802929241946 + input[12] * -0.01105331006380158 + input[13] * -0.01105331006380158 + input[14] * 0.05812123511457763 + input[15] * -0.9870844163436453 + input[16] * 0.08278425912307417 + input[17] * 0.11559361167499368 + input[18] * 0.6222193311659081 + input[19] * -0.0001076318401345977 + input[20] * 0.00028657218417272614 + input[21] * -0.07512987221369441 + input[22] * 0.1003100583629589 + input[23] * -0.013239657285342134;
}

double linear_svc_10_score(double * input) {
    return -2.314523807729939 + input[0] * 0.021861514572326497 + input[1] * -0.3439653552821472 + input[2] * -0.17322907238163707 + input[3] * 0.40940746850203424 + input[4] * 0.2380340942468712 + input[5] * -0.037428387672001455 + input[6] * -0.1724376099143574 + input[7] * 0.08771796407956828 + input[8] * -0.08620860555654354 + input[9] * 0.47794404206697944 + input[10] * 0.0011938349449675664 + input[11] * 0.005715157476240235 + input[12] * -0.004790778069632154 + input[13] * -0.004790778069632154 + input[14] * 0.09010063329685604 + input[15] * -0.40146343660406736 + input[16] * 0.05944725540158691 + input[17] * 0.10203094519439064 + input[18] * 0.08233529705250528 + input[19] * -0.006129090141512405 + input[20] * -0.006813194872066896 + input[21] * -0.04710045087573575 + input[22] * 0.08652248273258391 + input[23] * -0.01567644634568676 + input[24] * 0.20294778643868427 + input[25] * -0.05944328771811812 + input[26] * -0.13937068828402385 + input[27] * 0.008031172645642824 + input[28] * -0.13127496141542572 + input[29] * -0.49975289474365975 + input[30] * 0.08866832285949147 + input[31] * -0.8813287671218671 + input[32] * -1.3111282117872602 + input[33] * -0.18151963399603274 + input[34] * 0.0015325246311778784 + input[35] * -0.0011441471874599478 + input[36] * -0.0011441471874599478 + input[37] * 0.007692608591543609 + input[38] * 0.0011527410535045327 + input[39] * 0.0 + input[40] * -0.0008080344562427315 + input[41] * -0.0009831210751952806 + input[42] * -0.0002847265428072098 + input[43] * 0.0 + input[44] * 0.0;
}


int main() {
    std::vector<double> row = {1.0, 2.0, 3.0, 4.0, 5.0};

    // Run your code
    while (true) {
        double result = lr_1_score::score(row.data());
    }

    return 0;
}